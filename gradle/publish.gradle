// Publish gh-pages on github
gitPublish {
    repoUri = 'https://github.com/daraii/grails-jasper.git'

    branch = 'gh-pages'

    contents {
        from "${buildDir}/publishDocs"
    }

    repoDir = file("$buildDir/gitPublish") // defaults to $buildDir/gitPublish

    preserve {
        include '**/*'
    }

    commitMessage = 'Publishing a new page' // defaults to 'Generated by gradle-git-publish'
}

gitPublishPush.mustRunAfter("generatePublishDocs")

task generatePublishDocs(dependsOn: [docs]) {
    mustRunAfter('docs')
    inputs.dir("$buildDir/docs")
    doFirst {
        delete file("$buildDir/publishDocs")
    }
    doLast {
        grgit.open(dir: project.rootDir)
        if (grgit.branch.current().name == "master") {
            copy {
                from file("$buildDir/docs/manual")
                into file("$buildDir/publishDocs/snapshot")
            }
            copy {
                from file("$buildDir/docs/groovydoc")
                into file("$buildDir/publishDocs/snapshot/groovydoc")
            }
        }

        def tag = grgit.describe(match: ["[0-9].[0-9].[0-9]"])
        def isRelease = tag != null && tag.length() == 5 && isReleaseVersion
        if (isRelease) {
            def majorVersion = "${tag.substring(0,4)}x"
            copy {
                from file("$buildDir/docs/manual")
                into file("$buildDir/publishDocs/latest")
            }
            copy {
                from file("$buildDir/docs/groovydoc")
                into file("$buildDir/publishDocs/latest/groovydoc")
            }
            copy {
                from file("$buildDir/publishDocs/latest")
                into file("$buildDir/publishDocs/${tag}")
            }
            copy {
                from file("$buildDir/publishDocs/latest")
                into file("$buildDir/publishDocs/${majorVersion}")
            }
        }
        copy {
            from file("$buildDir/docs/index.html")
            into file("$buildDir/publishDocs/")
        }
    }
}

task publishDocs(dependsOn: [generatePublishDocs, gitPublishPush]) {
    doLast {

    }
}