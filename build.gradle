buildscript {
    ext {
        grailsVersion = project.grailsVersion
    }
    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        maven { url "https://repo.grails.org/grails/core" }
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsGradlePluginVersion"
        classpath "org.grails.plugins:hibernate5:7.2.2"
        classpath "com.bertramlabs.plugins:asset-pipeline-gradle:3.3.4"
        classpath 'org.ajoberstar.git-publish:gradle-git-publish:3.0.1'
        classpath "org.ajoberstar.grgit:grgit-gradle:4.1.1"
    }
}

plugins{
    id 'signing'
    id 'maven-publish'
    id('io.github.gradle-nexus.publish-plugin') version '1.1.0'
    id "org.asciidoctor.jvm.pdf" version "3.3.2"
    id "org.asciidoctor.jvm.convert" version "3.3.2"
}

apply plugin: "eclipse"
apply plugin: "idea"
apply plugin: "org.grails.grails-plugin"
apply plugin: "org.grails.grails-gsp"
apply plugin: 'org.ajoberstar.git-publish'
apply plugin: "org.ajoberstar.grgit"

version "2.2.0"
group "io.jellycat.plugins"

sourceCompatibility = 1.8
targetCompatibility = 1.8

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId = project.group
            artifactId = 'jasper'
            version = project.version

            from components.java
            artifact sourcesJar
            artifact javadocJar

            pom {
                name = 'JasperReports Grails Plugin'
                description = 'This plugin adds easy support for launching JasperReports from GSP pages and provides services and controllers for generating reports.'
                url = 'https://github.com/daraii/grails-jasper'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'daraii'
                        name = 'AN (Daraii)'
                        email = 'daraii@jellycat.io'
                    }
                }
                scm {
                    connection = 'scm:git://github.com:daraii/grails-jasper.git'
                    developerConnection = 'scm:git://github.com:daraii/grails-jasper.git'
                    url = 'https://github.com/daraii/grails-jasper'
                }
            }
        }
    }
}

nexusPublishing {
    repositories {
        sonatype {
            nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))
            snapshotRepositoryUrl.set(uri("https://s01.oss.sonatype.org/content/repositories/snapshots/"))
        }
    }
}

signing {
    required { isReleaseVersion && gradle.taskGraph.hasTask("publish") }
    def signingKey = findProperty("signingKey")
    def signingPassword = findProperty("signingPassword")
    useInMemoryPgpKeys(signingKey, signingPassword)
    sign publishing.publications.mavenJava
}

repositories {
    mavenLocal()
    maven { url "https://repo.grails.org/grails/core" }
}

ext {
    grailsVersion = project.grailsVersion
    gradleWrapperVersion = project.gradleWrapperVersion
    jasperReportsVersion = "6.20.0"
    isReleaseVersion = !version.endsWith("SNAPSHOT")
}

dependencies {
    implementation "org.springframework.boot:spring-boot-starter-logging"
    implementation "org.springframework.boot:spring-boot-autoconfigure"
    implementation "org.grails:grails-core"
    implementation "org.springframework.boot:spring-boot-starter-actuator"
    implementation "org.springframework.boot:spring-boot-starter-tomcat"
    implementation "org.grails:grails-web-boot"
    implementation "org.grails:grails-logging"
    implementation "org.grails:grails-plugin-rest"
    implementation "org.grails:grails-plugin-databinding"
    implementation "org.grails:grails-plugin-i18n"
    implementation "org.grails:grails-plugin-services"
    implementation "org.grails:grails-plugin-url-mappings"
    implementation "org.grails:grails-plugin-interceptors"
    implementation "org.grails.plugins:cache"
    implementation "org.grails.plugins:async"
    implementation "org.grails.plugins:scaffolding"
    implementation "org.grails.plugins:gsp"

    implementation "com.lowagie:itext:2.1.7"
    implementation("net.sf.jasperreports:jasperreports:$jasperReportsVersion") {
        ['antlr', 'commons-logging', 'ant', 'mondrian', 'commons-javaflow', 'barbecue', 'xml-apis-ext', 'xml-apis', 'xalan', 'groovy-all', 'hibernate',
         'saaj-api', 'servlet-api', 'xercesImpl', 'xmlParserAPIs', 'spring-core', 'bsh', 'spring-beans', 'jaxen', 'barcode4j', 'batik-svg-dom', 'batik-xml',
         'batik-awt-util', 'batik-dom', 'batik-css', 'batik-gvt', 'batik-script', 'batik-svggen', 'batik-util', 'batik-bridge', 'javax.persistence-api',
         'jdtcore', 'bcmail-jdk16', 'bcprov-jdk16', 'bctsp-jdk16', 'bcmail-jdk14', 'bcprov-jdk14', 'bctsp-jdk14', 'xmlbeans', 'olap4j']
                .each { name ->
                    exclude module: name
                }
    }
    implementation "org.apache.poi:poi:3.10-FINAL"
    implementation "commons-io:commons-io:2.2"
    implementation "org.codehaus.groovy:groovy-ant:2.4.7"

    console "org.grails:grails-console"
    profile "org.grails.profiles:web-plugin"
    compileOnly "org.grails:grails-plugin-services"
    compileOnly "org.grails:grails-plugin-domain-class"
    runtimeOnly "com.bertramlabs.plugins:asset-pipeline-grails:3.3.4"
    runtimeOnly "org.grails.plugins:hibernate5:$gormVersion"
    testImplementation "org.grails:grails-gorm-testing-support"
    testImplementation "org.grails:grails-web-testing-support"
    testImplementation "org.seleniumhq.selenium:selenium-htmlunit-driver:2.47.1"
    testImplementation "net.sourceforge.htmlunit:htmlunit:2.18"
}

jar {
    exclude "jasperDemo/**"
    exclude "public/reports/**"
    exclude "**/test/**"
    exclude "docs/**"
    exclude "grails/plugins/jasper/demo/**"
    exclude "*demo*"

    //Remove the demo.gsp from the release jar.
    List excludesViews = ['demo.gsp']

    eachFile { f ->
        if (f.path.contains('views.properties')) {
            filter { line -> excludesViews.find{!line.contains(it)} ? line : null}
        }
    }
}

bootRun {
    jvmArgs('-Dspring.output.ansi.enabled=always')
    sourceResources sourceSets.main
    String springProfilesActive = 'spring.profiles.active'
    systemProperty springProfilesActive, System.getProperty(springProfilesActive)
}

tasks.withType(GroovyCompile) {
    configure(groovyOptions) {
        forkOptions.jvmArgs = ['-Xmx1024m']
    }
}

tasks.withType(Test) {
    useJUnitPlatform()
}

tasks.withType(Sign) {
    onlyIf { isReleaseVersion }
}

// enable if you wish to package this plugin as a standalone application
bootJar.enabled = false

apply from: "gradle/documentation.gradle"
apply from: "gradle/publish.gradle"